{"version":3,"file":"Image-df45c9f2.js","sources":["../../node_modules/ol/layer/BaseImage.js","../../node_modules/ol/renderer/canvas/ImageLayer.js","../../node_modules/ol/layer/Image.js"],"sourcesContent":["/**\n * @module ol/layer/BaseImage\n */\nimport Layer from './Layer.js';\n\n/**\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {ImageSourceType} [source] Source for this layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<ImageSourceType, RendererType>}\n * @api\n */\nclass BaseImageLayer extends Layer {\n  /**\n   * @param {Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n    super(options);\n  }\n}\n\nexport default BaseImageLayer;\n","/**\n * @module ol/renderer/canvas/ImageLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageState from '../../ImageState.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {\n  containsCoordinate,\n  containsExtent,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects as intersectsExtent,\n  isEmpty,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\n\n/**\n * @classdesc\n * Canvas renderer for image layers.\n * @api\n */\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\n   */\n  constructor(imageLayer) {\n    super(imageLayer);\n\n    /**\n     * @protected\n     * @type {?import(\"../../Image.js\").default}\n     */\n    this.image_ = null;\n  }\n\n  /**\n   * @return {import('../../DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return !this.image_ ? null : this.image_.getImage();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewResolution = viewState.resolution;\n\n    const imageSource = this.getLayer().getSource();\n\n    const hints = frameState.viewHints;\n\n    let renderedExtent = frameState.extent;\n    if (layerState.extent !== undefined) {\n      renderedExtent = getIntersection(\n        renderedExtent,\n        fromUserExtent(layerState.extent, viewState.projection)\n      );\n    }\n\n    if (\n      !hints[ViewHint.ANIMATING] &&\n      !hints[ViewHint.INTERACTING] &&\n      !isEmpty(renderedExtent)\n    ) {\n      if (imageSource) {\n        const projection = viewState.projection;\n        const image = imageSource.getImage(\n          renderedExtent,\n          viewResolution,\n          pixelRatio,\n          projection\n        );\n        if (image) {\n          if (this.loadImage(image)) {\n            this.image_ = image;\n          } else if (image.getState() === ImageState.EMPTY) {\n            this.image_ = null;\n          }\n        }\n      } else {\n        this.image_ = null;\n      }\n    }\n\n    return !!this.image_;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const imageExtent = this.image_.getExtent();\n    const img = this.image_.getImage();\n\n    const imageMapWidth = getWidth(imageExtent);\n    const col = Math.floor(\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\n    );\n    if (col < 0 || col >= img.width) {\n      return null;\n    }\n\n    const imageMapHeight = getHeight(imageExtent);\n    const row = Math.floor(\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\n    );\n    if (row < 0 || row >= img.height) {\n      return null;\n    }\n\n    return this.getImageData(img, col, row);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const image = this.image_;\n    const imageExtent = image.getExtent();\n    const imageResolution = image.getResolution();\n    const [imageResolutionX, imageResolutionY] = Array.isArray(imageResolution)\n      ? imageResolution\n      : [imageResolution, imageResolution];\n    const imagePixelRatio = image.getPixelRatio();\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const pixelRatio = frameState.pixelRatio;\n    const viewState = frameState.viewState;\n    const viewCenter = viewState.center;\n    const viewResolution = viewState.resolution;\n    const scaleX =\n      (pixelRatio * imageResolutionX) / (viewResolution * imagePixelRatio);\n    const scaleY =\n      (pixelRatio * imageResolutionY) / (viewResolution * imagePixelRatio);\n\n    const extent = frameState.extent;\n    const resolution = viewState.resolution;\n    const rotation = viewState.rotation;\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    const context = this.context;\n    const canvas = context.canvas;\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent) {\n      const layerExtent = fromUserExtent(\n        layerState.extent,\n        viewState.projection\n      );\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const img = image.getImage();\n\n    const transform = composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      scaleX,\n      scaleY,\n      0,\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolutionX,\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolutionY\n    );\n\n    this.renderedResolution = (imageResolutionY * pixelRatio) / imagePixelRatio;\n\n    const dw = img.width * transform[0];\n    const dh = img.height * transform[3];\n\n    if (!this.getLayer().getSource().getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n    if (render && dw >= 0.5 && dh >= 0.5) {\n      const dx = transform[4];\n      const dy = transform[5];\n      const opacity = layerState.opacity;\n      let previousAlpha;\n      if (opacity !== 1) {\n        previousAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n      }\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\n      if (opacity !== 1) {\n        context.globalAlpha = previousAlpha;\n      }\n    }\n    this.postRender(context, frameState);\n\n    if (clipped) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n}\n\nexport default CanvasImageLayerRenderer;\n","/**\n * @module ol/layer/Image\n */\nimport BaseImageLayer from './BaseImage.js';\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\n\n/**\n * @classdesc\n * Server-rendered images that are available for arbitrary extents and\n * resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Image.js\").default} ImageSourceType\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\n * @api\n */\nclass ImageLayer extends BaseImageLayer {\n  /**\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasImageLayerRenderer(this);\n  }\n\n  /**\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\n   * source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default ImageLayer;\n"],"names":["BaseImageLayer","Layer","options","BaseImageLayer$1","CanvasImageLayerRenderer","CanvasLayerRenderer","imageLayer","frameState","layerState","pixelRatio","viewState","viewResolution","imageSource","hints","renderedExtent","getIntersection","fromUserExtent","ViewHint","isEmpty","projection","image","ImageState","pixel","layer","coordinate","applyTransform","layerExtent","containsCoordinate","imageExtent","img","imageMapWidth","getWidth","col","imageMapHeight","getHeight","row","target","imageResolution","imageResolutionX","imageResolutionY","imagePixelRatio","viewCenter","scaleX","scaleY","extent","resolution","rotation","width","height","composeTransform","makeInverse","canvasTransform","toTransformString","context","canvas","clipped","render","intersectsExtent","containsExtent","transform","dw","dh","dx","dy","opacity","previousAlpha","CanvasImageLayerRenderer$1","ImageLayer","ImageLayer$1"],"mappings":"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","x_google_ignoreList":[0,1,2]}