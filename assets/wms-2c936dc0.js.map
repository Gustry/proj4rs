{"version":3,"file":"wms-2c936dc0.js","sources":["../../node_modules/ol/uri.js","../../node_modules/ol/source/wms.js"],"sourcesContent":["/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/source/wms\n */\n\nimport {DECIMALS} from './common.js';\nimport {appendParams} from '../uri.js';\nimport {compareVersions} from '../string.js';\nimport {decode} from '../Image.js';\nimport {floor, round} from '../math.js';\nimport {getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {get as getProjection} from '../proj.js';\nimport {getRequestExtent} from './Image.js';\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n\n/**\n * @param {string} baseUrl Base URL.\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {import(\"../proj/Projection.js\").default} projection Projection.\n * @param {Object} params WMS params. Will be modified in place.\n * @return {string} Request URL.\n */\nexport function getRequestUrl(baseUrl, extent, size, projection, params) {\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  const v13 = compareVersions(params['VERSION'], '1.3') >= 0;\n  params[v13 ? 'CRS' : 'SRS'] = projection.getCode();\n  if (v13 && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (baseUrl), params);\n}\n\n/**\n * @param {import(\"../extent\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio pixel ratio.\n * @param {import(\"../proj.js\").Projection} projection Projection.\n * @param {string} url WMS service url.\n * @param {Object} params WMS params.\n * @param {import(\"./wms.js\").ServerType} serverType The type of the remote WMS server.\n * @return {string} Image src.\n */\nexport function getImageSrc(\n  extent,\n  resolution,\n  pixelRatio,\n  projection,\n  url,\n  params,\n  serverType\n) {\n  params = Object.assign({REQUEST: 'GetMap'}, params);\n\n  const imageResolution = resolution / pixelRatio;\n\n  const imageSize = [\n    round(getWidth(extent) / imageResolution, DECIMALS),\n    round(getHeight(extent) / imageResolution, DECIMALS),\n  ];\n\n  if (pixelRatio != 1) {\n    switch (serverType) {\n      case 'geoserver':\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case 'mapserver':\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case 'carmentaserver':\n      case 'qgis':\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        throw new Error('Unknown `serverType` configured');\n    }\n  }\n\n  const src = getRequestUrl(url, extent, imageSize, projection, params);\n  return src;\n}\n\n/**\n * @param {Object} params WMS params.\n * @param {string} request WMS `REQUEST`.\n * @return {Object} WMS params with required properties set.\n */\nexport function getRequestParams(params, request) {\n  return Object.assign(\n    {\n      'REQUEST': request,\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'FORMAT': 'image/png',\n      'STYLES': '',\n      'TRANSPARENT': true,\n    },\n    params\n  );\n}\n\n/**\n * @typedef {Object} LoaderOptions\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {Object<string,*>} [params] WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT` and `BBOX` will be set\n * dynamically. `CRS` (`SRS` for WMS version < 1.3.0) will is derived from the `proection` config.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is 'EPSG:3857'.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {string} url WMS service URL.\n * @property {function(HTMLImageElement, string): Promise<import('../DataTile.js').ImageLike>} [load] Function\n * to perform loading of the image. Receives the created `HTMLImageElement` and the desired `src` as argument and\n * returns a promise resolving to the loaded or decoded image. Default is {@link module:ol/Image.decode}.\n */\n\n/**\n * Creates a loader for WMS images.\n * @param {LoaderOptions} options Loader options.\n * @return {import(\"../Image.js\").ImageObjectPromiseLoader} Loader.\n * @api\n */\nexport function createLoader(options) {\n  const hidpi = options.hidpi === undefined ? true : options.hidpi;\n  const projection = getProjection(options.projection || 'EPSG:3857');\n  const ratio = options.ratio || 1.5;\n  const load = options.load || decode;\n\n  /**\n   * @type {import(\"../Image.js\").Loader}\n   */\n  return (extent, resolution, pixelRatio) => {\n    extent = getRequestExtent(extent, resolution, pixelRatio, ratio);\n    if (pixelRatio != 1 && (!hidpi || options.serverType === undefined)) {\n      pixelRatio = 1;\n    }\n    const src = getImageSrc(\n      extent,\n      resolution,\n      pixelRatio,\n      projection,\n      options.url,\n      getRequestParams(options.params, 'GetMap'),\n      options.serverType\n    );\n    const image = new Image();\n    if (options.crossOrigin !== null) {\n      image.crossOrigin = options.crossOrigin;\n    }\n    return load(image, src).then((image) => ({image, extent, pixelRatio}));\n  };\n}\n\n/**\n * Get the GetFeatureInfo URL for the passed coordinate and resolution. Returns `undefined` if the\n * GetFeatureInfo URL cannot be constructed.\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function. In addition to\n * the params required by the loader, `INFO_FORMAT` should be specified, it defaults to\n * `application/json`. If `QUERY_LAYERS` is not provided, then the layers specified in the `LAYERS`\n * parameter will be used.\n * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nexport function getFeatureInfoUrl(options, coordinate, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const projectionObj = getProjection(options.projection || 'EPSG:3857');\n\n  const extent = getForViewAndSize(\n    coordinate,\n    resolution,\n    0,\n    GETFEATUREINFO_IMAGE_SIZE\n  );\n\n  const baseParams = {\n    'QUERY_LAYERS': options.params['LAYERS'],\n    'INFO_FORMAT': 'application/json',\n  };\n  Object.assign(\n    baseParams,\n    getRequestParams(options.params, 'GetFeatureInfo'),\n    options.params\n  );\n\n  const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\n  const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\n  const v13 = compareVersions(baseParams['VERSION'], '1.3') >= 0;\n  baseParams[v13 ? 'I' : 'X'] = x;\n  baseParams[v13 ? 'J' : 'Y'] = y;\n\n  return getRequestUrl(\n    options.url,\n    extent,\n    GETFEATUREINFO_IMAGE_SIZE,\n    projectionObj,\n    baseParams\n  );\n}\n\n/**\n * Get the GetLegendGraphic URL, optionally optimized for the passed resolution and possibly\n * including any passed specific parameters. Returns `undefined` if the GetLegendGraphic URL\n * cannot be constructed.\n *\n * @param {LoaderOptions} options Options passed the `createWMSLoader()` function.\n * @param {number} [resolution] Resolution. If not provided, `SCALE` will not be calculated and\n * included in URL.\n * @return {string|undefined} GetLegendGraphic URL.\n * @api\n */\nexport function getLegendUrl(options, resolution) {\n  if (options.url === undefined) {\n    return undefined;\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_VERSION,\n    'REQUEST': 'GetLegendGraphic',\n    'FORMAT': 'image/png',\n  };\n\n  if (options.params === undefined || options.params['LAYER'] === undefined) {\n    const layers = options.params.LAYERS;\n    const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n    if (!isSingleLayer) {\n      return undefined;\n    }\n    baseParams['LAYER'] = layers;\n  }\n\n  if (resolution !== undefined) {\n    const mpu =\n      getProjection(options.projection || 'EPSG:3857').getMetersPerUnit() || 1;\n    const pixelSize = 0.00028;\n    baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n  }\n\n  Object.assign(baseParams, options.params);\n\n  return appendParams(options.url, baseParams);\n}\n"],"names":["appendParams","uri","params","keyParams","k","qs","DEFAULT_VERSION","GETFEATUREINFO_IMAGE_SIZE","getRequestUrl","baseUrl","extent","size","projection","axisOrientation","bbox","v13","compareVersions","getImageSrc","resolution","pixelRatio","url","serverType","imageResolution","imageSize","round","getWidth","DECIMALS","getHeight","dpi","getRequestParams","request","createLoader","options","hidpi","getProjection","ratio","load","decode","getRequestExtent","src","image","getFeatureInfoUrl","coordinate","projectionObj","getForViewAndSize","baseParams","x","floor","y","getLegendUrl","layers","mpu","pixelSize"],"mappings":"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","x_google_ignoreList":[0,1]}