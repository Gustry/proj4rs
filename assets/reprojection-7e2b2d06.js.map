{"version":3,"file":"reprojection-7e2b2d06.js","sources":["../../node_modules/ol/tilegrid/WMTS.js","../../node_modules/ol/source/WMTS.js","../../node_modules/ol/xml.js","../../node_modules/ol/format/XML.js","../../node_modules/ol/format/xlink.js","../../node_modules/ol/format/xsd.js","../../node_modules/ol/format/OWS.js","../../node_modules/ol/format/WMTSCapabilities.js","../../node_modules/ol/source/TileWMS.js","../../reprojection.js"],"sourcesContent":["/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n","/**\n * @module ol/xml\n */\nimport {extend} from './array.js';\n\n/**\n * When using {@link module:ol/xml.makeChildAppender} or\n * {@link module:ol/xml.makeSimpleNodeFactory}, the top `objectStack` item needs\n * to have this structure.\n * @typedef {Object} NodeStackItem\n * @property {Element} node Node.\n */\n\n/**\n * @typedef {function(Element, Array<*>): void} Parser\n */\n\n/**\n * @typedef {function(Element, *, Array<*>): void} Serializer\n */\n\n/**\n * @type {string}\n */\nexport const XML_SCHEMA_INSTANCE_URI =\n  'http://www.w3.org/2001/XMLSchema-instance';\n\n/**\n * @param {string} namespaceURI Namespace URI.\n * @param {string} qualifiedName Qualified name.\n * @return {Element} Node.\n */\nexport function createElementNS(namespaceURI, qualifiedName) {\n  return getDocument().createElementNS(namespaceURI, qualifiedName);\n}\n\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @return {string} All text content.\n * @api\n */\nexport function getAllTextContent(node, normalizeWhitespace) {\n  return getAllTextContent_(node, normalizeWhitespace, []).join('');\n}\n\n/**\n * Recursively grab all text content of child nodes into a single string.\n * @param {Node} node Node.\n * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line\n * breaks.\n * @param {Array<string>} accumulator Accumulator.\n * @private\n * @return {Array<string>} Accumulator.\n */\nexport function getAllTextContent_(node, normalizeWhitespace, accumulator) {\n  if (\n    node.nodeType == Node.CDATA_SECTION_NODE ||\n    node.nodeType == Node.TEXT_NODE\n  ) {\n    if (normalizeWhitespace) {\n      accumulator.push(String(node.nodeValue).replace(/(\\r\\n|\\r|\\n)/g, ''));\n    } else {\n      accumulator.push(node.nodeValue);\n    }\n  } else {\n    let n;\n    for (n = node.firstChild; n; n = n.nextSibling) {\n      getAllTextContent_(n, normalizeWhitespace, accumulator);\n    }\n  }\n  return accumulator;\n}\n\n/**\n * @param {Object} object Object.\n * @return {boolean} Is a document.\n */\nexport function isDocument(object) {\n  return 'documentElement' in object;\n}\n\n/**\n * @param {Element} node Node.\n * @param {?string} namespaceURI Namespace URI.\n * @param {string} name Attribute name.\n * @return {string} Value\n */\nexport function getAttributeNS(node, namespaceURI, name) {\n  return node.getAttributeNS(namespaceURI, name) || '';\n}\n\n/**\n * Parse an XML string to an XML Document.\n * @param {string} xml XML.\n * @return {Document} Document.\n * @api\n */\nexport function parse(xml) {\n  return new DOMParser().parseFromString(xml, 'application/xml');\n}\n\n/**\n * Make an array extender function for extending the array at the top of the\n * object stack.\n * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayExtender(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const array = /** @type {Array<*>} */ (\n          objectStack[objectStack.length - 1]\n        );\n        extend(array, value);\n      }\n    }\n  );\n}\n\n/**\n * Make an array pusher function for pushing to the array at the top of the\n * object stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeArrayPusher(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const array = /** @type {Array<*>} */ (\n          objectStack[objectStack.length - 1]\n        );\n        array.push(value);\n      }\n    }\n  );\n}\n\n/**\n * Make an object stack replacer function for replacing the object at the\n * top of the stack.\n * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeReplacer(valueReader, thisArg) {\n  return (\n    /**\n     * @param {Node} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        objectStack[objectStack.length - 1] = value;\n      }\n    }\n  );\n}\n\n/**\n * Make an object property pusher function for adding a property to the\n * object at the top of the stack.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [property] Property.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertyPusher(valueReader, property, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const object = /** @type {!Object} */ (\n          objectStack[objectStack.length - 1]\n        );\n        const name = property !== undefined ? property : node.localName;\n        let array;\n        if (name in object) {\n          array = object[name];\n        } else {\n          array = [];\n          object[name] = array;\n        }\n        array.push(value);\n      }\n    }\n  );\n}\n\n/**\n * Make an object property setter function.\n * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.\n * @param {string} [property] Property.\n * @param {T} [thisArg] The object to use as `this` in `valueReader`.\n * @return {Parser} Parser.\n * @template T\n */\nexport function makeObjectPropertySetter(valueReader, property, thisArg) {\n  return (\n    /**\n     * @param {Element} node Node.\n     * @param {Array<*>} objectStack Object stack.\n     */\n    function (node, objectStack) {\n      const value = valueReader.call(\n        thisArg !== undefined ? thisArg : this,\n        node,\n        objectStack\n      );\n      if (value !== undefined) {\n        const object = /** @type {!Object} */ (\n          objectStack[objectStack.length - 1]\n        );\n        const name = property !== undefined ? property : node.localName;\n        object[name] = value;\n      }\n    }\n  );\n}\n\n/**\n * Create a serializer that appends nodes written by its `nodeWriter` to its\n * designated parent. The parent is the `node` of the\n * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.\n * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeChildAppender(nodeWriter, thisArg) {\n  return function (node, value, objectStack) {\n    nodeWriter.call(\n      thisArg !== undefined ? thisArg : this,\n      node,\n      value,\n      objectStack\n    );\n    const parent = /** @type {NodeStackItem} */ (\n      objectStack[objectStack.length - 1]\n    );\n    const parentNode = parent.node;\n    parentNode.appendChild(node);\n  };\n}\n\n/**\n * Create a serializer that calls the provided `nodeWriter` from\n * {@link module:ol/xml.serialize}. This can be used by the parent writer to have the\n * `nodeWriter` called with an array of values when the `nodeWriter` was\n * designed to serialize a single item. An example would be a LineString\n * geometry writer, which could be reused for writing MultiLineString\n * geometries.\n * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.\n * @param {T} [thisArg] The object to use as `this` in `nodeWriter`.\n * @return {Serializer} Serializer.\n * @template T, V\n */\nexport function makeArraySerializer(nodeWriter, thisArg) {\n  let serializersNS, nodeFactory;\n  return function (node, value, objectStack) {\n    if (serializersNS === undefined) {\n      serializersNS = {};\n      const serializers = {};\n      serializers[node.localName] = nodeWriter;\n      serializersNS[node.namespaceURI] = serializers;\n      nodeFactory = makeSimpleNodeFactory(node.localName);\n    }\n    serialize(serializersNS, nodeFactory, value, objectStack);\n  };\n}\n\n/**\n * Create a node factory which can use the `keys` passed to\n * {@link module:ol/xml.serialize} or {@link module:ol/xml.pushSerializeAndPop} as node names,\n * or a fixed node name. The namespace of the created nodes can either be fixed,\n * or the parent namespace will be used.\n * @param {string} [fixedNodeName] Fixed node name which will be used for all\n *     created nodes. If not provided, the 3rd argument to the resulting node\n *     factory needs to be provided and will be the nodeName.\n * @param {string} [fixedNamespaceURI] Fixed namespace URI which will be used for\n *     all created nodes. If not provided, the namespace of the parent node will\n *     be used.\n * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.\n */\nexport function makeSimpleNodeFactory(fixedNodeName, fixedNamespaceURI) {\n  return (\n    /**\n     * @param {*} value Value.\n     * @param {Array<*>} objectStack Object stack.\n     * @param {string} [newNodeName] Node name.\n     * @return {Node} Node.\n     */\n    function (value, objectStack, newNodeName) {\n      const context = /** @type {NodeStackItem} */ (\n        objectStack[objectStack.length - 1]\n      );\n      const node = context.node;\n      let nodeName = fixedNodeName;\n      if (nodeName === undefined) {\n        nodeName = newNodeName;\n      }\n\n      const namespaceURI =\n        fixedNamespaceURI !== undefined ? fixedNamespaceURI : node.namespaceURI;\n      return createElementNS(namespaceURI, /** @type {string} */ (nodeName));\n    }\n  );\n}\n\n/**\n * A node factory that creates a node using the parent's `namespaceURI` and the\n * `nodeName` passed by {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop} to the node factory.\n * @const\n * @type {function(*, Array<*>, string=): (Node|undefined)}\n */\nexport const OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();\n\n/**\n * Create an array of `values` to be used with {@link module:ol/xml.serialize} or\n * {@link module:ol/xml.pushSerializeAndPop}, where `orderedKeys` has to be provided as\n * `key` argument.\n * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can\n *     be a subset of the `orderedKeys`.\n * @param {Array<string>} orderedKeys Keys in the order of the sequence.\n * @return {Array<*>} Values in the order of the sequence. The resulting array\n *     has the same length as the `orderedKeys` array. Values that are not\n *     present in `object` will be `undefined` in the resulting array.\n */\nexport function makeSequence(object, orderedKeys) {\n  const length = orderedKeys.length;\n  const sequence = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    sequence[i] = object[orderedKeys[i]];\n  }\n  return sequence;\n}\n\n/**\n * Create a namespaced structure, using the same values for each namespace.\n * This can be used as a starting point for versioned parsers, when only a few\n * values are version specific.\n * @param {Array<string>} namespaceURIs Namespace URIs.\n * @param {T} structure Structure.\n * @param {Object<string, T>} [structureNS] Namespaced structure to add to.\n * @return {Object<string, T>} Namespaced structure.\n * @template T\n */\nexport function makeStructureNS(namespaceURIs, structure, structureNS) {\n  structureNS = structureNS !== undefined ? structureNS : {};\n  let i, ii;\n  for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {\n    structureNS[namespaceURIs[i]] = structure;\n  }\n  return structureNS;\n}\n\n/**\n * Parse a node using the parsers and object stack.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [thisArg] The object to use as `this`.\n */\nexport function parseNode(parsersNS, node, objectStack, thisArg) {\n  let n;\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    const parsers = parsersNS[n.namespaceURI];\n    if (parsers !== undefined) {\n      const parser = parsers[n.localName];\n      if (parser !== undefined) {\n        parser.call(thisArg, n, objectStack);\n      }\n    }\n  }\n}\n\n/**\n * Push an object on top of the stack, parse and return the popped object.\n * @param {T} object Object.\n * @param {Object<string, Object<string, Parser>>} parsersNS\n *     Parsers by namespace.\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @param {*} [thisArg] The object to use as `this`.\n * @return {T} Object.\n * @template T\n */\nexport function pushParseAndPop(object, parsersNS, node, objectStack, thisArg) {\n  objectStack.push(object);\n  parseNode(parsersNS, node, objectStack, thisArg);\n  return /** @type {T} */ (objectStack.pop());\n}\n\n/**\n * Walk through an array of `values` and call a serializer for each value.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `keys` has\n *     to match the length of `values`. For serializing a sequence, `keys`\n *     determines the order of the sequence.\n * @param {T} [thisArg] The object to use as `this` for the node factory and\n *     serializers.\n * @template T\n */\nexport function serialize(\n  serializersNS,\n  nodeFactory,\n  values,\n  objectStack,\n  keys,\n  thisArg\n) {\n  const length = (keys !== undefined ? keys : values).length;\n  let value, node;\n  for (let i = 0; i < length; ++i) {\n    value = values[i];\n    if (value !== undefined) {\n      node = nodeFactory.call(\n        thisArg !== undefined ? thisArg : this,\n        value,\n        objectStack,\n        keys !== undefined ? keys[i] : undefined\n      );\n      if (node !== undefined) {\n        serializersNS[node.namespaceURI][node.localName].call(\n          thisArg,\n          node,\n          value,\n          objectStack\n        );\n      }\n    }\n  }\n}\n\n/**\n * @param {O} object Object.\n * @param {Object<string, Object<string, Serializer>>} serializersNS\n *     Namespaced serializers.\n * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory\n *     Node factory. The `nodeFactory` creates the node whose namespace and name\n *     will be used to choose a node writer from `serializersNS`. This\n *     separation allows us to decide what kind of node to create, depending on\n *     the value we want to serialize. An example for this would be different\n *     geometry writers based on the geometry type.\n * @param {Array<*>} values Values to serialize. An example would be an array\n *     of {@link module:ol/Feature~Feature} instances.\n * @param {Array<*>} objectStack Node stack.\n * @param {Array<string>} [keys] Keys of the `values`. Will be passed to the\n *     `nodeFactory`. This is used for serializing object literals where the\n *     node name relates to the property key. The array length of `keys` has\n *     to match the length of `values`. For serializing a sequence, `keys`\n *     determines the order of the sequence.\n * @param {T} [thisArg] The object to use as `this` for the node factory and\n *     serializers.\n * @return {O|undefined} Object.\n * @template O, T\n */\nexport function pushSerializeAndPop(\n  object,\n  serializersNS,\n  nodeFactory,\n  values,\n  objectStack,\n  keys,\n  thisArg\n) {\n  objectStack.push(object);\n  serialize(serializersNS, nodeFactory, values, objectStack, keys, thisArg);\n  return /** @type {O|undefined} */ (objectStack.pop());\n}\n\nlet xmlSerializer_ = undefined;\n\n/**\n * Register a XMLSerializer. Can be used  to inject a XMLSerializer\n * where there is no globally available implementation.\n *\n * @param {XMLSerializer} xmlSerializer A XMLSerializer.\n * @api\n */\nexport function registerXMLSerializer(xmlSerializer) {\n  xmlSerializer_ = xmlSerializer;\n}\n\n/**\n * @return {XMLSerializer} The XMLSerializer.\n */\nexport function getXMLSerializer() {\n  if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {\n    xmlSerializer_ = new XMLSerializer();\n  }\n  return xmlSerializer_;\n}\n\nlet document_ = undefined;\n\n/**\n * Register a Document to use when creating nodes for XML serializations. Can be used\n * to inject a Document where there is no globally available implementation.\n *\n * @param {Document} document A Document.\n * @api\n */\nexport function registerDocument(document) {\n  document_ = document;\n}\n\n/**\n * Get a document that should be used when creating nodes for XML serializations.\n * @return {Document} The document.\n */\nexport function getDocument() {\n  if (document_ === undefined && typeof document !== 'undefined') {\n    document_ = document.implementation.createDocument('', '', null);\n  }\n  return document_;\n}\n","/**\n * @module ol/format/XML\n */\nimport {abstract} from '../util.js';\nimport {isDocument, parse} from '../xml.js';\n\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @abstract\n */\nclass XML {\n  /**\n   * Read the source document.\n   *\n   * @param {Document|Element|string} source The XML source.\n   * @return {Object|null} An object representing the source.\n   * @api\n   */\n  read(source) {\n    if (!source) {\n      return null;\n    }\n    if (typeof source === 'string') {\n      const doc = parse(source);\n      return this.readFromDocument(doc);\n    }\n    if (isDocument(source)) {\n      return this.readFromDocument(/** @type {Document} */ (source));\n    }\n    return this.readFromNode(/** @type {Element} */ (source));\n  }\n\n  /**\n   * @param {Document} doc Document.\n   * @return {Object|null} Object\n   */\n  readFromDocument(doc) {\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\n      if (n.nodeType == Node.ELEMENT_NODE) {\n        return this.readFromNode(/** @type {Element} */ (n));\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @abstract\n   * @param {Element} node Node.\n   * @return {Object|null} Object\n   */\n  readFromNode(node) {\n    abstract();\n  }\n}\n\nexport default XML;\n","/**\n * @module ol/format/xlink\n */\n\n/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n/**\n * @param {Element} node Node.\n * @return {string|null} href.\n */\nexport function readHref(node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n}\n","/**\n * @module ol/format/xsd\n */\nimport {getAllTextContent, getDocument} from '../xml.js';\nimport {padNumber} from '../string.js';\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBoolean(node) {\n  const s = getAllTextContent(node, false);\n  return readBooleanString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nexport function readBooleanString(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nexport function readDateTime(node) {\n  const s = getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimal(node) {\n  const s = getAllTextContent(node, false);\n  return readDecimalString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nexport function readDecimalString(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nexport function readPositiveInteger(node) {\n  const s = getAllTextContent(node, false);\n  return readNonNegativeIntegerString(s);\n}\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nexport function readNonNegativeIntegerString(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  }\n  return undefined;\n}\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nexport function readString(node) {\n  return getAllTextContent(node, false).trim();\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nexport function writeBooleanTextNode(node, bool) {\n  writeStringTextNode(node, bool ? '1' : '0');\n}\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nexport function writeCDATASection(node, string) {\n  node.appendChild(getDocument().createCDATASection(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nexport function writeDateTimeTextNode(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string =\n    date.getUTCFullYear() +\n    '-' +\n    padNumber(date.getUTCMonth() + 1, 2) +\n    '-' +\n    padNumber(date.getUTCDate(), 2) +\n    'T' +\n    padNumber(date.getUTCHours(), 2) +\n    ':' +\n    padNumber(date.getUTCMinutes(), 2) +\n    ':' +\n    padNumber(date.getUTCSeconds(), 2) +\n    'Z';\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nexport function writeDecimalTextNode(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nexport function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(getDocument().createTextNode(string));\n}\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nexport function writeStringTextNode(node, string) {\n  node.appendChild(getDocument().createTextNode(string));\n}\n","/**\n * @module ol/format/OWS\n */\nimport XML from './XML.js';\nimport {\n  makeObjectPropertyPusher,\n  makeObjectPropertySetter,\n  makeStructureNS,\n  pushParseAndPop,\n} from '../xml.js';\nimport {readHref} from './xlink.js';\nimport {readString} from './xsd.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ServiceIdentification': makeObjectPropertySetter(readServiceIdentification),\n  'ServiceProvider': makeObjectPropertySetter(readServiceProvider),\n  'OperationsMetadata': makeObjectPropertySetter(readOperationsMetadata),\n});\n\nclass OWS extends XML {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object|null} Object\n   */\n  readFromNode(node) {\n    const owsObject = pushParseAndPop({}, PARSERS, node, []);\n    return owsObject ? owsObject : null;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ADDRESS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'DeliveryPoint': makeObjectPropertySetter(readString),\n  'City': makeObjectPropertySetter(readString),\n  'AdministrativeArea': makeObjectPropertySetter(readString),\n  'PostalCode': makeObjectPropertySetter(readString),\n  'Country': makeObjectPropertySetter(readString),\n  'ElectronicMailAddress': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst ALLOWED_VALUES_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Value': makeObjectPropertyPusher(readValue),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONSTRAINT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'AllowedValues': makeObjectPropertySetter(readAllowedValues),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTACT_INFO_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Phone': makeObjectPropertySetter(readPhone),\n  'Address': makeObjectPropertySetter(readAddress),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DCP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'HTTP': makeObjectPropertySetter(readHttp),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst HTTP_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Get': makeObjectPropertyPusher(readGet),\n  'Post': undefined, // TODO\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OPERATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'DCP': makeObjectPropertySetter(readDcp),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst OPERATIONS_METADATA_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Operation': readOperation,\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PHONE_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Voice': makeObjectPropertySetter(readString),\n  'Facsimile': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst REQUEST_METHOD_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Constraint': makeObjectPropertyPusher(readConstraint),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_CONTACT_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'IndividualName': makeObjectPropertySetter(readString),\n  'PositionName': makeObjectPropertySetter(readString),\n  'ContactInfo': makeObjectPropertySetter(readContactInfo),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_IDENTIFICATION_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Abstract': makeObjectPropertySetter(readString),\n  'AccessConstraints': makeObjectPropertySetter(readString),\n  'Fees': makeObjectPropertySetter(readString),\n  'Title': makeObjectPropertySetter(readString),\n  'ServiceTypeVersion': makeObjectPropertySetter(readString),\n  'ServiceType': makeObjectPropertySetter(readString),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst SERVICE_PROVIDER_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'ProviderName': makeObjectPropertySetter(readString),\n  'ProviderSite': makeObjectPropertySetter(readHref),\n  'ServiceContact': makeObjectPropertySetter(readServiceContact),\n});\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The address.\n */\nfunction readAddress(node, objectStack) {\n  return pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The values.\n */\nfunction readAllowedValues(node, objectStack) {\n  return pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The constraint.\n */\nfunction readConstraint(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (!name) {\n    return undefined;\n  }\n  return pushParseAndPop({'name': name}, CONSTRAINT_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The contact info.\n */\nfunction readContactInfo(node, objectStack) {\n  return pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The DCP.\n */\nfunction readDcp(node, objectStack) {\n  return pushParseAndPop({}, DCP_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The GET object.\n */\nfunction readGet(node, objectStack) {\n  const href = readHref(node);\n  if (!href) {\n    return undefined;\n  }\n  return pushParseAndPop(\n    {'href': href},\n    REQUEST_METHOD_PARSERS,\n    node,\n    objectStack\n  );\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The HTTP object.\n */\nfunction readHttp(node, objectStack) {\n  return pushParseAndPop({}, HTTP_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operation.\n */\nfunction readOperation(node, objectStack) {\n  const name = node.getAttribute('name');\n  const value = pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);\n  if (!value) {\n    return undefined;\n  }\n  const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  object[name] = value;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The operations metadata.\n */\nfunction readOperationsMetadata(node, objectStack) {\n  return pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The phone.\n */\nfunction readPhone(node, objectStack) {\n  return pushParseAndPop({}, PHONE_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service identification.\n */\nfunction readServiceIdentification(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service contact.\n */\nfunction readServiceContact(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} The service provider.\n */\nfunction readServiceProvider(node, objectStack) {\n  return pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {string|undefined} The value.\n */\nfunction readValue(node, objectStack) {\n  return readString(node);\n}\n\nexport default OWS;\n","/**\n * @module ol/format/WMTSCapabilities\n */\nimport OWS from './OWS.js';\nimport XML from './XML.js';\nimport {boundingExtent} from '../extent.js';\nimport {\n  makeArrayPusher,\n  makeObjectPropertyPusher,\n  makeObjectPropertySetter,\n  makeStructureNS,\n  pushParseAndPop,\n} from '../xml.js';\nimport {readDecimal, readPositiveInteger, readString} from './xsd.js';\nimport {readHref} from './xlink.js';\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];\n\n/**\n * @const\n * @type {Array<null|string>}\n */\nconst OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Contents': makeObjectPropertySetter(readContents),\n});\n\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @api\n */\nclass WMTSCapabilities extends XML {\n  constructor() {\n    super();\n\n    /**\n     * @type {OWS}\n     * @private\n     */\n    this.owsParser_ = new OWS();\n  }\n\n  /**\n   * @param {Element} node Node.\n   * @return {Object|null} Object\n   */\n  readFromNode(node) {\n    let version = node.getAttribute('version');\n    if (version) {\n      version = version.trim();\n    }\n    let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n    if (!WMTSCapabilityObject) {\n      return null;\n    }\n    WMTSCapabilityObject['version'] = version;\n    WMTSCapabilityObject = pushParseAndPop(\n      WMTSCapabilityObject,\n      PARSERS,\n      node,\n      []\n    );\n    return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n  }\n}\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst CONTENTS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'Layer': makeObjectPropertyPusher(readLayer),\n  'TileMatrixSet': makeObjectPropertyPusher(readTileMatrixSet),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst LAYER_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'Style': makeObjectPropertyPusher(readStyle),\n    'Format': makeObjectPropertyPusher(readString),\n    'TileMatrixSetLink': makeObjectPropertyPusher(readTileMatrixSetLink),\n    'Dimension': makeObjectPropertyPusher(readDimensions),\n    'ResourceURL': makeObjectPropertyPusher(readResourceUrl),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Abstract': makeObjectPropertySetter(readString),\n    'WGS84BoundingBox': makeObjectPropertySetter(readBoundingBox),\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst STYLE_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'LegendURL': makeObjectPropertyPusher(readLegendUrl),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Title': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LINKS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrixSet': makeObjectPropertySetter(readString),\n  'TileMatrixSetLimits': makeObjectPropertySetter(readTileMatrixLimitsList),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LIMITS_LIST_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrixLimits': makeArrayPusher(readTileMatrixLimits),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_LIMITS_PARSERS = makeStructureNS(NAMESPACE_URIS, {\n  'TileMatrix': makeObjectPropertySetter(readString),\n  'MinTileRow': makeObjectPropertySetter(readPositiveInteger),\n  'MaxTileRow': makeObjectPropertySetter(readPositiveInteger),\n  'MinTileCol': makeObjectPropertySetter(readPositiveInteger),\n  'MaxTileCol': makeObjectPropertySetter(readPositiveInteger),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst DIMENSION_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'Default': makeObjectPropertySetter(readString),\n    'Value': makeObjectPropertyPusher(readString),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst WGS84_BBOX_READERS = makeStructureNS(OWS_NAMESPACE_URIS, {\n  'LowerCorner': makeArrayPusher(readCoordinates),\n  'UpperCorner': makeArrayPusher(readCoordinates),\n});\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TMS_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'WellKnownScaleSet': makeObjectPropertySetter(readString),\n    'TileMatrix': makeObjectPropertyPusher(readTileMatrix),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'SupportedCRS': makeObjectPropertySetter(readString),\n    'Identifier': makeObjectPropertySetter(readString),\n    'BoundingBox': makeObjectPropertySetter(readBoundingBox),\n  })\n);\n\n/**\n * @const\n * @type {Object<string, Object<string, import(\"../xml.js\").Parser>>}\n */\n// @ts-ignore\nconst TM_PARSERS = makeStructureNS(\n  NAMESPACE_URIS,\n  {\n    'TopLeftCorner': makeObjectPropertySetter(readCoordinates),\n    'ScaleDenominator': makeObjectPropertySetter(readDecimal),\n    'TileWidth': makeObjectPropertySetter(readPositiveInteger),\n    'TileHeight': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixWidth': makeObjectPropertySetter(readPositiveInteger),\n    'MatrixHeight': makeObjectPropertySetter(readPositiveInteger),\n  },\n  makeStructureNS(OWS_NAMESPACE_URIS, {\n    'Identifier': makeObjectPropertySetter(readString),\n  })\n);\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nfunction readContents(node, objectStack) {\n  return pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nfunction readLayer(node, objectStack) {\n  return pushParseAndPop({}, LAYER_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nfunction readTileMatrixSet(node, objectStack) {\n  return pushParseAndPop({}, TMS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nfunction readStyle(node, objectStack) {\n  const style = pushParseAndPop({}, STYLE_PARSERS, node, objectStack);\n  if (!style) {\n    return undefined;\n  }\n  const isDefault = node.getAttribute('isDefault') === 'true';\n  style['isDefault'] = isDefault;\n  return style;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nfunction readTileMatrixSetLink(node, objectStack) {\n  return pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nfunction readDimensions(node, objectStack) {\n  return pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nfunction readResourceUrl(node, objectStack) {\n  const format = node.getAttribute('format');\n  const template = node.getAttribute('template');\n  const resourceType = node.getAttribute('resourceType');\n  const resource = {};\n  if (format) {\n    resource['format'] = format;\n  }\n  if (template) {\n    resource['template'] = template;\n  }\n  if (resourceType) {\n    resource['resourceType'] = resourceType;\n  }\n  return resource;\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} BBox object.\n */\nfunction readBoundingBox(node, objectStack) {\n  const coordinates = pushParseAndPop(\n    [],\n    WGS84_BBOX_READERS,\n    node,\n    objectStack\n  );\n  if (coordinates.length != 2) {\n    return undefined;\n  }\n  return boundingExtent(coordinates);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nfunction readLegendUrl(node, objectStack) {\n  const legend = {};\n  legend['format'] = node.getAttribute('format');\n  legend['href'] = readHref(node);\n  return legend;\n}\n\n/**\n * @param {Node} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nfunction readCoordinates(node, objectStack) {\n  const coordinates = readString(node).split(/\\s+/);\n  if (!coordinates || coordinates.length != 2) {\n    return undefined;\n  }\n  const x = +coordinates[0];\n  const y = +coordinates[1];\n  if (isNaN(x) || isNaN(y)) {\n    return undefined;\n  }\n  return [x, y];\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nfunction readTileMatrix(node, objectStack) {\n  return pushParseAndPop({}, TM_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nfunction readTileMatrixLimitsList(node, objectStack) {\n  return pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);\n}\n\n/**\n * @param {Element} node Node.\n * @param {Array<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nfunction readTileMatrixLimits(node, objectStack) {\n  return pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);\n}\n\nexport default WMTSCapabilities;\n","/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION, getImageSrc, getRequestParams} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection() || projectionObj;\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(sourceProjectionObj);\n    }\n\n    const sourceProjCoord = transform(\n      coordinate,\n      projectionObj,\n      sourceProjectionObj\n    );\n    const sourceResolution = calculateSourceResolution(\n      sourceProjectionObj,\n      projectionObj,\n      coordinate,\n      resolution\n    );\n\n    const z = tileGrid.getZForResolution(sourceResolution, this.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(sourceProjCoord, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = {\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(\n      baseParams,\n      getRequestParams(this.params_, 'GetFeatureInfo'),\n      params\n    );\n\n    const x = Math.floor((sourceProjCoord[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - sourceProjCoord[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(tileCoord, tileExtent, pixelRatio, projection, params) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    return getImageSrc(\n      tileExtent,\n      (\n        this.tileGrid || this.getTileGridForProjection(projection)\n      ).getResolution(tileCoord[0]),\n      pixelRatio,\n      projection,\n      url,\n      params,\n      this.serverType_\n    );\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    const baseParams = Object.assign(\n      {},\n      getRequestParams(this.params_, 'GetMap')\n    );\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n","import Map from 'ol/Map.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport View from 'ol/View.js';\nimport WMTS, {optionsFromCapabilities} from 'ol/source/WMTS.js';\nimport WMTSCapabilities from 'ol/format/WMTSCapabilities.js';\nimport {proj4} from './assets/js/proj4.js';\nimport {OSM, TileImage, TileWMS} from 'ol/source.js';\nimport {createXYZ} from 'ol/tilegrid.js';\nimport {getCenter, getWidth} from 'ol/extent.js';\nimport {get as getProjection, transformExtent} from 'ol/proj.js';\nimport {register} from 'ol/proj/proj4.js';\n\nproj4.defs(\n  'EPSG:27700',\n  '+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 ' +\n    '+x_0=400000 +y_0=-100000 +ellps=airy ' +\n    '+towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489 ' +\n    '+units=m +no_defs'\n);\nproj4.defs(\n  'EPSG:23032',\n  '+proj=utm +zone=32 +ellps=intl ' +\n    '+towgs84=-87,-98,-121,0,0,0,0 +units=m +no_defs'\n);\nproj4.defs(\n  'EPSG:5479',\n  '+proj=lcc +lat_1=-76.66666666666667 +lat_2=' +\n    '-79.33333333333333 +lat_0=-78 +lon_0=163 +x_0=7000000 +y_0=5000000 ' +\n    '+ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n);\nproj4.defs(\n  'EPSG:21781',\n  '+proj=somerc +lat_0=46.95240555555556 ' +\n    '+lon_0=7.439583333333333 +k_0=1 +x_0=600000 +y_0=200000 +ellps=bessel ' +\n    '+towgs84=674.4,15.1,405.3,0,0,0,0 +units=m +no_defs'\n);\nproj4.defs(\n  'EPSG:3413',\n  '+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 ' +\n    '+x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs'\n);\nproj4.defs(\n  'EPSG:2163',\n  '+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 ' +\n    '+a=6370997 +b=6370997 +units=m +no_defs'\n);\nproj4.defs(\n  'ESRI:54009',\n  '+proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 ' + '+units=m +no_defs'\n);\nregister(proj4);\n\nconst proj27700 = getProjection('EPSG:27700');\nproj27700.setExtent([-650000, -150000, 1350000, 1450000]);\n\nconst proj23032 = getProjection('EPSG:23032');\nproj23032.setExtent([-1206118.71, 4021309.92, 1295389.0, 8051813.28]);\n\nconst proj5479 = getProjection('EPSG:5479');\nproj5479.setExtent([6825737.53, 4189159.8, 9633741.96, 5782472.71]);\n\nconst proj21781 = getProjection('EPSG:21781');\nproj21781.setExtent([485071.54, 75346.36, 828515.78, 299941.84]);\n\nconst proj3413 = getProjection('EPSG:3413');\nproj3413.setExtent([-4194304, -4194304, 4194304, 4194304]);\n\nconst proj2163 = getProjection('EPSG:2163');\nproj2163.setExtent([-8040784.5135, -2577524.921, 3668901.4484, 4785105.1096]);\n\nconst proj54009 = getProjection('ESRI:54009');\nproj54009.setExtent([-18e6, -9e6, 18e6, 9e6]);\n\nconst layers = {};\n\nlayers['osm'] = new TileLayer({\n  source: new OSM(),\n});\n\nlayers['wms4326'] = new TileLayer({\n  source: new TileWMS({\n    url: 'https://ahocevar.com/geoserver/gwc/service/wms',\n    crossOrigin: '',\n    params: {\n      'LAYERS': 'ne:NE1_HR_LC_SR_W_DR',\n      'TILED': true,\n      'VERSION': '1.1.1',\n    },\n    projection: 'EPSG:4326',\n    // Source tile grid (before reprojection)\n    tileGrid: createXYZ({\n      extent: [-180, -90, 180, 90],\n      maxResolution: 360 / 512,\n      maxZoom: 10,\n    }),\n    // Accept a reprojection error of 2 pixels\n    reprojectionErrorThreshold: 2,\n  }),\n});\n\nlayers['wms21781'] = new TileLayer({\n  source: new TileWMS({\n    attributions:\n      '© <a href=\"https://shop.swisstopo.admin.ch/en/products/maps/national/lk1000\"' +\n      'target=\"_blank\">Pixelmap 1:1000000 / geo.admin.ch</a>',\n    crossOrigin: 'anonymous',\n    params: {\n      'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\n      'FORMAT': 'image/jpeg',\n    },\n    url: 'https://wms.geo.admin.ch/',\n    projection: 'EPSG:21781',\n  }),\n});\n\nconst parser = new WMTSCapabilities();\n\nlayers['wmts3413'] = new TileLayer();\nconst urlA =\n  'https://map1.vis.earthdata.nasa.gov/wmts-arctic/' +\n  'wmts.cgi?SERVICE=WMTS&request=GetCapabilities';\nfetch(urlA)\n  .then(function (response) {\n    return response.text();\n  })\n  .then(function (text) {\n    const result = parser.read(text);\n    const options = optionsFromCapabilities(result, {\n      layer: 'OSM_Land_Mask',\n      matrixSet: 'EPSG3413_250m',\n    });\n    options.crossOrigin = '';\n    options.projection = 'EPSG:3413';\n    options.wrapX = false;\n    layers['wmts3413'].setSource(new WMTS(options));\n  });\n\nlayers['bng'] = new TileLayer();\nconst urlB =\n  'https://tiles.arcgis.com/tiles/qHLhLQrcvEnxjtPr/arcgis/rest/services/OS_Open_Raster/MapServer/WMTS';\nfetch(urlB)\n  .then(function (response) {\n    return response.text();\n  })\n  .then(function (text) {\n    const result = parser.read(text);\n    const options = optionsFromCapabilities(result, {\n      layer: 'OS_Open_Raster',\n    });\n    options.attributions =\n      'Contains OS data © Crown Copyright and database right ' +\n      new Date().getFullYear();\n    options.crossOrigin = '';\n    options.projection = 'EPSG:27700';\n    options.wrapX = false;\n    layers['bng'].setSource(new WMTS(options));\n  });\n\nconst startResolution = getWidth(getProjection('EPSG:3857').getExtent()) / 256;\nconst resolutions = new Array(22);\nfor (let i = 0, ii = resolutions.length; i < ii; ++i) {\n  resolutions[i] = startResolution / Math.pow(2, i);\n}\n\nlayers['states'] = new TileLayer({\n  source: new TileWMS({\n    url: 'https://ahocevar.com/geoserver/wms',\n    crossOrigin: '',\n    params: {'LAYERS': 'topp:states'},\n    serverType: 'geoserver',\n    tileGrid: new TileGrid({\n      extent: [-13884991, 2870341, -7455066, 6338219],\n      resolutions: resolutions,\n      tileSize: [512, 256],\n    }),\n    projection: 'EPSG:3857',\n  }),\n});\n\nconst map = new Map({\n  layers: [layers['osm'], layers['bng']],\n  target: 'map',\n  view: new View({\n    projection: 'EPSG:3857',\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nconst baseLayerSelect = document.getElementById('base-layer');\nconst overlayLayerSelect = document.getElementById('overlay-layer');\nconst viewProjSelect = document.getElementById('view-projection');\nconst renderEdgesCheckbox = document.getElementById('render-edges');\nlet renderEdges = false;\n\nfunction updateViewProjection() {\n  const newProj = getProjection(viewProjSelect.value);\n  const newProjExtent = newProj.getExtent();\n  const newView = new View({\n    projection: newProj,\n    center: getCenter(newProjExtent || [0, 0, 0, 0]),\n    zoom: 0,\n    extent: newProjExtent || undefined,\n  });\n  map.setView(newView);\n\n  // Example how to prevent double occurrence of map by limiting layer extent\n  if (newProj.isGlobal()) {\n    layers['bng'].setExtent(\n      transformExtent(proj27700.getExtent(), proj27700, newProj, 2)\n    );\n  } else {\n    layers['bng'].setExtent(undefined);\n  }\n}\n\n/**\n * Handle change event.\n */\nviewProjSelect.onchange = function () {\n  updateViewProjection();\n};\n\nupdateViewProjection();\n\nconst updateRenderEdgesOnLayer = function (layer) {\n  if (layer instanceof TileLayer) {\n    const source = layer.getSource();\n    if (source instanceof TileImage) {\n      source.setRenderReprojectionEdges(renderEdges);\n    }\n  }\n};\n\n/**\n * Handle change event.\n */\nbaseLayerSelect.onchange = function () {\n  const layer = layers[baseLayerSelect.value];\n  if (layer) {\n    layer.setOpacity(1);\n    updateRenderEdgesOnLayer(layer);\n    map.getLayers().setAt(0, layer);\n  }\n};\n\n/**\n * Handle change event.\n */\noverlayLayerSelect.onchange = function () {\n  const layer = layers[overlayLayerSelect.value];\n  if (layer) {\n    layer.setOpacity(0.7);\n    updateRenderEdgesOnLayer(layer);\n    map.getLayers().setAt(1, layer);\n  }\n};\n\n/**\n * Handle change event.\n */\nrenderEdgesCheckbox.onchange = function () {\n  renderEdges = renderEdgesCheckbox.checked;\n  map.getLayers().forEach(function (layer) {\n    updateRenderEdgesOnLayer(layer);\n  });\n};\n"],"names":["WMTSTileGrid","TileGrid","options","z","createFromCapabilitiesMatrixSet","matrixSet","extent","matrixLimits","resolutions","matrixIds","origins","tileSizes","sizes","supportedCRSPropName","matrixIdsPropName","identifierPropName","scaleDenominatorPropName","topLeftCornerPropName","tileWidthPropName","tileHeightPropName","code","projection","getProjection","metersPerUnit","switchOriginXY","a","b","elt","matrixAvailable","elt_ml","resolution","tileWidth","tileHeight","WMTS","TileImage","requestEncoding","tileGrid","urls","expandUrl","createFromTileUrlFunctions","key","res","dimensions","template","context","appendParams","m","p","tileCoord","pixelRatio","localContext","url","WMTS$1","optionsFromCapabilities","wmtsCap","config","l","tileMatrixSets","idx","supportedCRS","el","proj1","proj2","equivalent","format","style","index","array","value","matrixSetObj","projConfig","wrapX","switchXY","matrix","selectedMatrixLimit","tileMatrixValue","origin","tileSpanX","tileSpanY","matrixSetExtent","containsExtent","wgs84BoundingBox","wgs84ProjectionExtent","wgs84MatrixSetExtent","transformExtent","gets","i","ii","encodings","element","getAllTextContent","node","normalizeWhitespace","getAllTextContent_","accumulator","n","isDocument","object","parse","xml","makeArrayPusher","valueReader","thisArg","objectStack","makeObjectPropertyPusher","property","name","makeObjectPropertySetter","makeStructureNS","namespaceURIs","structure","structureNS","parseNode","parsersNS","parsers","parser","pushParseAndPop","XML","source","doc","abstract","XML$1","NAMESPACE_URI","readHref","readDecimal","s","readDecimalString","string","readPositiveInteger","readNonNegativeIntegerString","readString","NAMESPACE_URIS","PARSERS","readServiceIdentification","readServiceProvider","readOperationsMetadata","OWS","owsObject","ADDRESS_PARSERS","ALLOWED_VALUES_PARSERS","readValue","CONSTRAINT_PARSERS","readAllowedValues","CONTACT_INFO_PARSERS","readPhone","readAddress","DCP_PARSERS","readHttp","HTTP_PARSERS","readGet","OPERATION_PARSERS","readDcp","OPERATIONS_METADATA_PARSERS","readOperation","PHONE_PARSERS","REQUEST_METHOD_PARSERS","readConstraint","SERVICE_CONTACT_PARSERS","readContactInfo","SERVICE_IDENTIFICATION_PARSERS","SERVICE_PROVIDER_PARSERS","readServiceContact","href","OWS$1","OWS_NAMESPACE_URIS","readContents","WMTSCapabilities","version","WMTSCapabilityObject","CONTENTS_PARSERS","readLayer","readTileMatrixSet","LAYER_PARSERS","readStyle","readTileMatrixSetLink","readDimensions","readResourceUrl","readBoundingBox","STYLE_PARSERS","readLegendUrl","TMS_LINKS_PARSERS","readTileMatrixLimitsList","TMS_LIMITS_LIST_PARSERS","readTileMatrixLimits","TMS_LIMITS_PARSERS","DIMENSION_PARSERS","WGS84_BBOX_READERS","readCoordinates","TMS_PARSERS","readTileMatrix","TM_PARSERS","isDefault","resourceType","resource","coordinates","boundingExtent","legend","x","y","WMTSCapabilities$1","TileWMS","params","transparent","createEmpty","coordinate","projectionObj","sourceProjectionObj","sourceProjCoord","transform","sourceResolution","calculateSourceResolution","tileResolution","tileExtent","gutter","buffer","baseParams","getRequestParams","DEFAULT_VERSION","layers","mpu","pixelSize","modulo","tileCoordHash","getImageSrc","compareVersions","TileWMS$1","proj4","register","proj27700","proj23032","proj5479","proj21781","proj3413","proj2163","proj54009","TileLayer","OSM","createXYZ","urlA","response","text","result","urlB","startResolution","getWidth","map","Map","View","baseLayerSelect","overlayLayerSelect","viewProjSelect","renderEdgesCheckbox","renderEdges","updateViewProjection","newProj","newProjExtent","newView","getCenter","updateRenderEdgesOnLayer","layer"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}